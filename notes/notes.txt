Refer to this site continuously along with course:

    see: https://www.cprogramming.com/tutorial/c-tutorial.html?inl=nv


Week 1:

    Getting Started:

        Overview:

            C language is near to to bare metal, near to the computer hardware and gives us the level of understanding
            The term "bare metal" refers to a hard disk, the usual medium on which a computer's OS is installed.

        History of C:

            Invented by Dennis Ritchie

    First Program:

        Compiling, debugging, and running a program, part1:

            Tools needed: Compiler --> gnu Compiler(gcc), notepad(windows), visual studios
                        Editors ---> vi, vim, notepad

            Steps:

                1. Compile
                    - Syntax Error     
                
                2. Fix Error & Recompile:
                    - Run               
                    - Wrong Answer -----> Again to 1.
                    
                    - If correct -----> get an ouput compiled File(A Run time Executable Code/ Machine Code) with extension a.out(assembler output) by default.

                    There is a Problem with a.out file

                    So, we use:
                                gcc -o file.exe file.c  [Attouching .exe as extension will make a file automatically Executable]

                                

            NOTE:
                Professor Ira Pohl(Instructor) suggested to write code in paper before typing on System.

        
        
            Compiling, debugging, and running a program, part2(File included +):


                see:  samplePrgrm/

                1. gcc -o prgm.exe prgrm1.c

        
            First Program:

                see: prgm1/

            Circle code:

                see: Circlecode/

                #include <stdio.h>
                |
                |---> The header file stdio.h stands for Standard Input Output. It has the information related to input/output functions.
                |see:  https://www.tutorialspoint.com/header-files-stdio-h-and-stdlib-h-in-c
                |
                |---> This type of preprocessor directive tells the compiler to include a file in the source code program.
                |see: https://www.geeksforgeeks.org/c-c-include-directive-with-examples/


            Marathon:

                see: marathon/


        Simple input/output:

            Simple input/output - fahrenheit

                see: Temp_unit_chnge/

            
            Simple input/output - miles

                see: dist_unit_chnge/


Week 2:

    Character sets and tokens:

        Tokens are the smallest elements of a program, which are meaningful to the compiler.
        The following are the types of tokens: Keywords, Identifiers, Constant, Strings, Operators, etc.

            1. https://www.tutorialspoint.com/tokens-in-c

            2. https://www.geeksforgeeks.org/c-program-detect-tokens-c-program/

        During compilation,
            Compiler looks for syntax errors 1st

            If it gets error , We have to fix it
            
            Else
            
            It it will it symantically analyse the code whether it has error or notepad
            https://stackoverflow.com/questions/3355349/what-does-the-word-semantic-mean-in-computer-science-context

            Then program is Run......

        Comments:

            multi line comment: /* ....... 
                                ... */
        
            single line comment: //

        Keywords:

            Keywords = Reserved Keywords

            All keywords: https://www.programiz.com/c-programming/list-all-keywords-c-language

                          https://en.cppreference.com/w/c/keyword

                          https://en.cppreference.com/w/cpp/keyword

    
            Size of corresponding keywords: https://www.tutorialspoint.com/cprogramming/c_data_types.htm

            In Cpp, Keywords are more than C. Many additional keywords in Cpp.


        Identifiers:

            int main()
             ^   ^       identifier
             |   |________|
          keyword


        Operators:

            Operator Precedence:

                https://www.programiz.com/c-programming/precedence-associativity-operators


        Expressions and precedence(File included +):

            |Declaration| |Initialization|
                        | |
                    int a  =  1;
                    int b  =  2;
                    int c;

            In C, there is lvls. of Precedence: https://en.cppreference.com/w/c/language/operator_precedence


            Associativity:

                1. a + b + c          -------------------> Left to right 
                   ==> ((a + b) + c )   

                2. a = b = c = 3
                   ==> (a = (b = (c = 3))) --------------> Right to Left

        Expression and evaluation:

            /       -->  int/floating pt operators or double 

                2/3   --> 0
                2.0/3 --> 0.666666666666666666...

            %       -->  remainder/modulus
            ++, --  -->  increament per post
            =       -->  assignment operator
            ==      -->  relational operators

            pre/post increaments:

                Precedence: Post > Pre

                a = ++b; pre
                    ==> s1: b = b+1
                    ==> s2: a = b

                a = b++; post
                    ==> s1: a = b 
                    ==> s2: b = b+1

                see: exprmnt/

            Declaration:

                type    :  int, double, ...
                
                type identifier;  :  int a;

                type identifier = Initialization :  int a = 2;

                type declaration.list;  int a = 3, b = 5;

            Fundamentals: types and sizeof:

                normal:

                    char : 'a' , 'N' , '5' , '\n'
                    int  : 0 , -3 , 77
                    double : 1.245, 3.2e5 ---> 3.2 * 10^5

                                    _________________
                    1 byte = 8 bits |1|2|3|4|5|6|7|8| ---> each bits represented with 1's and 0's 

                    To find size:

                        sizeof(type)
                        sizeof(variable)

                    see: sizeof/

            The char type (File included +):

                char : 'x' , '7' , '\n' ----> within quotes

                ASCII value: 0-127

                'A' to 'Z' --> 65-90
                'a' to 'z' --> 97-122

                http://www.asciitable.com/


                Non-printing char:

                    '\n' --> prints new lines
                    '\a' --> it would make a sound on System


                see: char/  ---> In linux, In my case, it didn't make any beep sound

            The int type:

                    A printf format specifier follows the form %[flags][width][. precision][length]specifier.

                    normal int form, int (short) form, int (long) form, int (unsigned) form
                        |                    |                |                  |
                        V                    V                V                  V
                Eg:    35                   35               35l                35u


                int            123, -1, 2147483647, 040 (octal), 0xab (hexadecimal)
                unsigned int   123u, 2147483648, 040U (octal), 0X02 (hexadecimal)
                long           123l, 0XFFFFl (hexadecimal)
                unsigned long  123ul, 0777UL (octal)
                float          1.23f, 3.14e+0f
                double         1.23, 2.718281828
                long double    1.23l, 9.99E-9L

                see: intforms/


            The integer and floating point types (Files included +):

                        size |  float ---> 10^(-38) 
                  increament |  double         |
                             V long double-> 10^(38)

                1.0 = 1. = 0.1e1 

                Input/Output Conversion Characters:

                    Conversion Character:

                        %e or %E --> prints out as: 1.23456e+00 type format

                        %f ---> prints out as : 1.23456

                        %g or %G --> either %e or %f , depending on which is shortest

            NOTE:
                When we include stdio.h header file

                We should compiled/exe/binary file as : 
                    
                                                        gcc filename.exe -o filename.c -lm

Week 3:

    Logical operators, expressions, and short-cicuit evaluation:

        1. Relational Operators and expressions:

            Logical operators, expressions, and short-circuit evaluation:

                see: logical_operators/

                precedence of short-cicuit opearator '&&' and '||'  is very low

                Short-circuit evaluation:

                Short circuiting is something that will happen when your program is running and it hits a 
                conditional.  A short circuit in logic is when you know for sure that an entire complex 
                conditional is either true or false before you evaluate the whole thing.

                Just the same concept as the short ckt in curent electricity
                
                Short circuiting with the two binary logical operators, AND (&&) and OR (||). 

        2. The Compound Statement:

            The conditonal statement if and if-else:
                
                see: if_else/

                expressions:
                
                    zero     --> "false"
                    non-zero --> "true"

                    ***NOTE: Precedence comes after arithmetic operators, +, -, *, /
                                                            
            The iterative statement while:

                see: for_&_while/(Both while.c and while_with_out_compd.c woks the same)

                1. Run the script: produce a.out file : gcc < C script>
                   Then change permission to execute. and then : ./a.out < <path to a file>
                                                                         ^
                                                                         |               |-----|----------------------Redirection...
                                                                         |----------------     V
                2. Can also done normally: gcc -o <file.exe>  < C script> ,then: ./compile.exe < <path to a file>

                ***NOTE: '<' is used to input file to the C script

                syntax:

                    while (i < 10 )
                    {
                        printf("%d", i);
                        i++
                    }

            while-code-example:

                see: for_&_while/while2.c

        3. While loop questions:

            The For statement and its While analog:

                    eg: for(Initialization ; terminate cond.; increament/decreament)
                        {
                            printf("Count %d sheep\n",i);
                        }

            for statement code example:
            
                see: for_&_while/for_loop.c

                compare result of 1.c and 2.c and see the difference caused due to getchar()

            oddball operators-conditional and comma:

                see: for_&_while/

                conditional operators/ Ternary operators: ? , :

                    Syntax: main_expr ? expr_1 : expr_2

                        c = (a < b)? a : b 

                        means-->
                                if (a < b)
                                    c = a;
                                else
                                    c = b;
                    
                comma operator: ,

                    Syntax:  expr_1 , expr_2

                        eg: c = (a = 0, b = 1)

                            then 
                                c = ((a = 0), (b = 1));
                                printf("c = %d", c);
                                |________
                                        |
                                        V
                                    Prints 1


                            Multiple Initialization:

                                for( sum = 0, i = 0; i <= 50; i++)
                                {
                                    sum += i;  -----> 1+2+3+...+50
                                }

            ternary-operator code example:

                see: for_&_while/ternary_and_switch_case.c

            
        4. Why the goto should be avoided:

            Break and continue and switch (File included +):

                
                see: break_continue_switch/

                Syntax:
                           label
                            |
                            V
                    switch (i) 
                    { 
                        
                    case labels ---> Data types used as case labels of switch statement in C are 
                          |         integer,short,long and character. Float and Double can't be used as case labels.
                          |
                          V
                        case 1: /* Code */; break;
                        case 2: /* Code */; break;
                        default: /* Code */; break;
                    }

Week 4:

    
    1. Functions:

        Function definition

            void wrt_address(void) // -->Just like int main()
            {
                printf("Ckaus\n")
                printf("north pole\n")
            }


            ***NOTE: 

                    If a Function's foo() return type is void then, it means
                    | 
                    |-->the function does not need any return statement




            Uses: 

                reuse
                encapsulation
                structure of code

        Functions code example

            see: week4/function1.c

        Return statement           

            * It is the flos of control keyword

            return 0 --> ending of int main() in correct/expected way

            syntax:

                return; 

                or, return expr;

                eg: return 0; , return; , return (a+b); , return (0); 

                double cube(double x)
                {
                return (x*x*x);
                }
                a = cube (2);

        Function, declaration and prototypes

            see: week4/function2.c and function3.c
            

        Function variables -with call-by-value explianed

            see: week4/call_by_value.c
             

        Function Definition and scope rules

            1. Requires declarations

            2. Blocks: Nested Blocks and Parallel Blocks

            3. Multiple use of same identifier name

            4. lifetime of availability


                Eg: lvl 1: loop1  x = 1

                        {   
                            x = 1 (received from upper lvl)
                            lvl2: loop2  x = 2 (initialised)

                            print x ----> x = 2
                            {
                                lvl3: loop3 x = 2 ( just upper lvl)
                                 
                                  x = 3 (initilised)

                                  print x ---> x = 3
                                  {
                                      lvl 4: x = 3 (received from just upper lvl)

                                      print x ---> x = 3
                                  }
                            
                                print x ---> x = 3
                            }

                            print x ---> x = 2
                        }

                        print x ---> x = 1

    2. Usage of storage classes:

        Storage class code example

            see:week4/storage.c, storage_common.c, storage_header.h

                1.
                 run: gcc -o compile.exe storage.c storage_common.c
                 execute: ./compile.exe

                2.
                storage2.c

                run: gcc -o compile.exe storage2.c
                execute: ./compile.exe


                None of the above steps worked ...!!!!

        Simple Recurssion

            see: week4/recurssion.c

            1.  void count_down(int n)
                {
                    while (n > 0)
                    {
                        printf("time is %d\n",n );
                        n--;
                    }
                    printf("Blast off\n);
                }

            OR,


            2.  void recursive_count_down(int n)
                {
                    if (n == 0)
                        printf("Blast off\n");
                    else
                        printf("Time is %d\n",n);
                        recursive_count_down(n-1); // <---- Recursive function. happens repeteadly
                }

            Recurssion Factorial Code

                n! = 1 * 2 * 3 ... * n
                
                see: week4/recurssion.c

        Recursion fibonacci code:

            see: week4/fibonacci.c

            