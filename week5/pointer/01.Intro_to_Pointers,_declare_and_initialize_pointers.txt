
    Address             Contents    __________
                    +---------------+        |
    1000            |   0010 0011   |        |
                    +---------------+        |
    1001            |   0101 0011   |        |
                    +---------------+        |
    1002            |   0001 1000   |        |
                    +---------------+        |--------------> i
                    |       .       |        |
                    |       .       |        |
                    |       .       |        |
                    +---------------+        |
    1019            |   0001 0001   |        |
                    +---------------+________|

                     size = 20 bytes

                    Each block comprises integer of 2 bytes


***NOTE:

    1. Pointer is a special variable that is capable of storing same Address

        +-----+             +----+
        |     |-----------> |    |
        +-----+             +----+ 
           p                   i

    2. It points to a memory location where the first byte is stored



Syntax:
-------

data_type *pointer_name
 |
 |-------------> 1. Here, data type refers to the type of the value the pointer will refer to.

                 2. Pointer variable doesn't have it's own data type, because it always contains the address of some other object, so we mention tha data of
                    that object, the pointer points to.

For example:

    int *ptr; -----> 'ptr' pointer will point to an integer value

    char *ptr -----> 'ptr' pointer will point to a character value

    float *ptr ----> 'ptr' pointer will point to a float value


Initialize a pointer variable:
-------------------------------

*1. simply declaring a pointer is not enough.

*2. It is important to initialize pointer before use.

*3. One way to initiaze a pointer is to assign address of some variable.


For example:               x
                        +-----+
    1. int x =5;        |  5  |
                        +-----+
                         1000 ----> Base address
       int *ptr;        
       
                          ptr
                        +-----+
                        |     |
                        +-----+
                         2000 ----> Base address
       
       
       ptr = &x; ------|
                       |------------------------------------> ptr = address/ Base of address of x
                                                                  = 1000
                                                                               ptr
                                                                    =====>  +--------+
                                                                            | 10000  |
                                                                            +--------+    
                                                                               2000

                                                                    That means:
       |-----------------------------------------------------------------|
       |
       V
         x
      +-----+
      |  5  |  <------------------------------|                        ptr
      +-----+                                 |____________________+---------+
        1000                                                       |  1000   |
                                                                   +---------+
                                                                        2000

    So again from beginning,
                   ______
        int x = 5;      |
        int *ptr;       |      Can also be written as          +-----------------------+
                        |------------------------------------> | int x = 5; *ptr = &x; |
        ptr = &x;       |                                      +-----------------------+
                   -----| 


    




    Just to touch upon a final point made briefly above: arrays don't require a reference operator (the ampersand) when you want to have a pointer to them. 
	--------------------------------------------------------------------------------------------------------------------------------------------------------

    For example:
        
                char *ptr;
                char str[40];
                ptr = str;  ----> Gives the memory address without a reference operator(&) 

            As opposed to:
            ---------------
                int *ptr;
                int num;
                ptr = &num; ----> Requires & to give the memory address to the ptr 

